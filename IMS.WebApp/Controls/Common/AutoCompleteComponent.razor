<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" class="form-control" @bind-value="userInput" @bind-value:event="oninput" @onkeyup="OnPressKeys" />

</div>
@if (searchResult != null && searchResult.Count > 0)
{
    <div class="search-result">
        <ul>
            @{
                int itemIndex = 0;

                foreach (var item in searchResult)
                {
                    <li @key="item.Id" @onclick="(() => OnSelectItem(item))" class="@(itemIndex == currentItemIndex?"selected":"")">
                        @item.Name
                    </li>
                    itemIndex++;
                }
            }

        </ul>
    </div>
}

@code {

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private List<ItemViewModel>? searchResult = null;

    private ItemViewModel? selectedItem = null;

    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private string _userInput = string.Empty;
    public string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;
            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
            {
                if (selectedItem?.Name != _userInput)
                {
                    searchResult = SearchFunction(_userInput);

                    selectedItem = null;
                }
            }
            else
                ClearCurrentItem();
        }
    }

    private void OnSelectItem(ItemViewModel? item)
    {

        ClearCurrentItem();
        if (item != null)
        {
            selectedItem = item;
            userInput = item.Name;
            OnItemSelected.InvokeAsync(item);
        };

    }

    private void OnPressKeys(KeyboardEventArgs e)
    {
        if ((e.Code == "ArrowDown" || e.Code == "ArrowUp") && searchResult != null && searchResult.Count > 0)
        {
            if (e.Code == "ArrowDown" && currentItemIndex < searchResult.Count - 1)
            {
                currentItem = searchResult[++currentItemIndex];

            }
            else if (e.Code == "ArrowUp" && currentItemIndex > 0)
            {
                currentItem = searchResult[--currentItemIndex];

            }

        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            OnSelectItem(currentItem);
        }
    }

    private void ClearCurrentItem()
    {
        searchResult = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

}
