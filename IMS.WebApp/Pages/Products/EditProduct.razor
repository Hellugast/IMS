@page "/editProduct/{id:int}"
@using IMS.UseCases.Products.Interfaces;
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject NavigationManager navigationManager
@inject IEditProductUseCase EditProductUseCase

<h3>EditProduct</h3>

@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="SaveProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="invs">Inventories</label>
            <ProductInventoriesComponent Product="product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick=Cancel>Cancel</button>

    </EditForm>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private Product? product;

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(Id);
    }

    private async Task SaveProduct()
    {
        if (product != null)
        {
            await EditProductUseCase.ExecuteAsync(product);
        }
        navigationManager.NavigateTo("/products");
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/products");
    }
}
